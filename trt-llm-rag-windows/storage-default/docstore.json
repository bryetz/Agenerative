{"docstore/metadata": {"bd4d1b6e-8373-415d-a688-fe14ea4e9d9d": {"doc_hash": "148fef228821f4504c19dc926efebd74fe73211e61fb63b69e87d30c00e03e80"}, "800d4345-1c92-496c-b571-ffdbcd9b9099": {"doc_hash": "5853cbb4b54a8fa6339852ad1358d58b3a656bae74fb796157dfbe67b0664474"}, "7d853072-18ba-4fa2-9409-38f7bdf4c827": {"doc_hash": "61c35c80062de8bcbbd3592cc98f8d165795da1af0a5e8974c6928e2d569c3f7"}, "07de102f-391b-433d-b21f-fee6fa96cd4c": {"doc_hash": "418692cea440aef09ebc9df1d7a97de0595e044fa1b1c43deef291db34315bef"}, "e86aef86-424b-45fc-b47e-597d58c91e86": {"doc_hash": "b7d917f2ddcecd01057f0b05728654b675e7f698853d08c7183035ddb28f7eda"}, "8a0c8f2f-35f5-41e3-95f7-539afb4886f2": {"doc_hash": "65a0a3c367453acfa210d8584d9cc5dc1e5a91e3ebe43e2a8598394f686e1c26"}, "7b059f51-cc6b-49bc-a9fb-77df7b9ade80": {"doc_hash": "a8fc818139a132bb6f9a2d204cba42e79e4287024803476bc4f20342aac70859"}, "504d551a-39d6-48f6-bec9-95df9eaf3016": {"doc_hash": "9a71865e08102e41d43cd62141d65aee8e912bc5ff6f938cebf666cb7a958068"}, "bdc31236-6846-4408-9a3e-68c273d7c8fd": {"doc_hash": "2fa0137b4f546095ab0c5f4aed0660f4043fefd6ae4917285fc9cc45a70bb36f"}, "378ca16c-7089-41ef-8b86-7ef6e208a64d": {"doc_hash": "3b36677aa946ff6287773a363eea6967c1b4add7cd6a8b03c79fed2c744edb91"}, "c6e52e41-2f5b-43e0-ab40-d21ad03be7c3": {"doc_hash": "cd0a19c0c78b276503cd24c7fcb0794acacc92828f084212c47bf9b5123d1d57"}, "f3909be4-0893-4792-b760-697d2fc37e35": {"doc_hash": "03343d759431a001a704ad57b33c008e90a80e5fd1d894a36e45da8985c954e0"}, "2e326ab7-c150-482a-9077-17114d1d8476": {"doc_hash": "ebefc9434a40083aebf89f9493e671bfb2e7a16ed97ce78199fd124291e9a735"}, "65c707fe-c603-4c62-9c5d-19a84b9d590f": {"doc_hash": "fd89f8fb98ff87d022177c777876c52bade9019cae197d37b207a2dba022a3aa"}, "35718d67-39f3-4655-9880-9f225a89480f": {"doc_hash": "843616f58e2f18e1e971b00d4334e641ab6634af5e18c259d66db048a5f00ca6"}, "82b501c6-651f-44e6-9913-f910007ba867": {"doc_hash": "3cc7f7e399c4fcecdac0f3099e8fba8d6c03bfb2efe3de6f6e093f7bad393cdb"}, "5e0ebafd-1e64-41ac-b775-f15cf64dc6be": {"doc_hash": "faad4f8a4cd2b071aa7a1c4449ad6091dd79ae8b851125406fc4e749eccb9e53"}, "83ba0fe9-eae1-42b6-bb11-4830afc86656": {"doc_hash": "e680d980392f26fd75276a7d466b8a6a40113ba20f8685b4ad39617c02af83f6"}, "5ecc2701-727a-4548-aa80-2d32dab0fa53": {"doc_hash": "153afaa5e2223f9e63b1f639555231e8797d2437e300b0cb8ad00491606570b5"}, "9d6d9da0-b8b0-4c0f-bdd4-5633034da6cd": {"doc_hash": "f2043617d5c5d3315a08e1d7ee4773ce43b542c24d17d9ba2a44ea4d0c946ac5", "ref_doc_id": "bd4d1b6e-8373-415d-a688-fe14ea4e9d9d"}, "672182c9-c951-4f6f-b298-6e6d56b332c5": {"doc_hash": "d0b2337ea0175ce52e906107a95d436d9ae92156a04aa571338be90a45610d2a", "ref_doc_id": "bd4d1b6e-8373-415d-a688-fe14ea4e9d9d"}, "e4a94502-787f-450d-996f-b6359e5165a1": {"doc_hash": "39a9e39b661a89b422c96a23eaf8e7f11bb6d9dab190c2c7a79eeb0d09f6a004", "ref_doc_id": "bd4d1b6e-8373-415d-a688-fe14ea4e9d9d"}, "aadcda65-b12e-4a39-aff1-311364c9abfa": {"doc_hash": "5853cbb4b54a8fa6339852ad1358d58b3a656bae74fb796157dfbe67b0664474", "ref_doc_id": "800d4345-1c92-496c-b571-ffdbcd9b9099"}, "60668204-e15b-4afa-8b90-55604a282266": {"doc_hash": "0f3ad1442218ea26fa7a6c8b198df75eb681d1b91f3e5d0b2f9ff24b0873fe46", "ref_doc_id": "7d853072-18ba-4fa2-9409-38f7bdf4c827"}, "99ed77a3-5272-42e2-b5db-e626e9735fc8": {"doc_hash": "418692cea440aef09ebc9df1d7a97de0595e044fa1b1c43deef291db34315bef", "ref_doc_id": "07de102f-391b-433d-b21f-fee6fa96cd4c"}, "67f7cd08-531a-41f5-adc8-6facb6bc73e5": {"doc_hash": "bc40990b2b0a57c7c63d2dc685999aa1bea2c1b7f2d735379a013a029c049a54", "ref_doc_id": "e86aef86-424b-45fc-b47e-597d58c91e86"}, "c8561c4e-b10b-4090-996a-a93f95ccbd0f": {"doc_hash": "91b68c8b05ae62f39eaa571619f0088246bf08a01cb2a8c9493fd048d194e509", "ref_doc_id": "e86aef86-424b-45fc-b47e-597d58c91e86"}, "7cd67969-0c58-4917-a3fe-5ccdff9ddfe2": {"doc_hash": "65a0a3c367453acfa210d8584d9cc5dc1e5a91e3ebe43e2a8598394f686e1c26", "ref_doc_id": "8a0c8f2f-35f5-41e3-95f7-539afb4886f2"}, "e60eadbe-9861-4ba3-9d57-3139773324cd": {"doc_hash": "690665354677e611462cc641ea35a736f3634c125de0acf15099e2cdbdff5655", "ref_doc_id": "7b059f51-cc6b-49bc-a9fb-77df7b9ade80"}, "a87722d8-8d0f-408e-bdcb-e092eb19e332": {"doc_hash": "2fa0137b4f546095ab0c5f4aed0660f4043fefd6ae4917285fc9cc45a70bb36f", "ref_doc_id": "bdc31236-6846-4408-9a3e-68c273d7c8fd"}, "505eba80-8393-4eae-990c-f4deb3375a34": {"doc_hash": "3b36677aa946ff6287773a363eea6967c1b4add7cd6a8b03c79fed2c744edb91", "ref_doc_id": "378ca16c-7089-41ef-8b86-7ef6e208a64d"}, "9b33f6c6-cae1-44b7-a76f-9393d11605b5": {"doc_hash": "cd0a19c0c78b276503cd24c7fcb0794acacc92828f084212c47bf9b5123d1d57", "ref_doc_id": "c6e52e41-2f5b-43e0-ab40-d21ad03be7c3"}, "27b31ac6-e968-4883-9af0-cba6dff1a0d4": {"doc_hash": "03343d759431a001a704ad57b33c008e90a80e5fd1d894a36e45da8985c954e0", "ref_doc_id": "f3909be4-0893-4792-b760-697d2fc37e35"}, "d66326c6-cca4-4f2b-bb67-a6ebfd7b3200": {"doc_hash": "ebefc9434a40083aebf89f9493e671bfb2e7a16ed97ce78199fd124291e9a735", "ref_doc_id": "2e326ab7-c150-482a-9077-17114d1d8476"}, "8c5c4f76-d05a-4a3b-ae66-fde2e8c176f9": {"doc_hash": "fd89f8fb98ff87d022177c777876c52bade9019cae197d37b207a2dba022a3aa", "ref_doc_id": "65c707fe-c603-4c62-9c5d-19a84b9d590f"}, "999e2ac7-4765-4334-96fe-eb6ccde9f25e": {"doc_hash": "843616f58e2f18e1e971b00d4334e641ab6634af5e18c259d66db048a5f00ca6", "ref_doc_id": "35718d67-39f3-4655-9880-9f225a89480f"}, "170fdb63-5927-407c-96f5-fed8e81d2899": {"doc_hash": "3cc7f7e399c4fcecdac0f3099e8fba8d6c03bfb2efe3de6f6e093f7bad393cdb", "ref_doc_id": "82b501c6-651f-44e6-9913-f910007ba867"}, "f3d640f1-9aca-48b2-904b-81ae048f6266": {"doc_hash": "faad4f8a4cd2b071aa7a1c4449ad6091dd79ae8b851125406fc4e749eccb9e53", "ref_doc_id": "5e0ebafd-1e64-41ac-b775-f15cf64dc6be"}, "64254380-9a67-4f6d-b9bf-a651aef1e7eb": {"doc_hash": "e680d980392f26fd75276a7d466b8a6a40113ba20f8685b4ad39617c02af83f6", "ref_doc_id": "83ba0fe9-eae1-42b6-bb11-4830afc86656"}, "e7e878ca-5fa0-43c8-9cb5-6569e4ea6dcc": {"doc_hash": "3ee20b31048db7536c837727e6a381a80e06a24d0740886c8cdfd470237ad9d9", "ref_doc_id": "5ecc2701-727a-4548-aa80-2d32dab0fa53"}}, "docstore/data": {"9d6d9da0-b8b0-4c0f-bdd4-5633034da6cd": {"__data__": {"id_": "9d6d9da0-b8b0-4c0f-bdd4-5633034da6cd", "embedding": null, "metadata": {"page_label": "1", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bd4d1b6e-8373-415d-a688-fe14ea4e9d9d", "node_type": null, "metadata": {"page_label": "1", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "148fef228821f4504c19dc926efebd74fe73211e61fb63b69e87d30c00e03e80"}, "3": {"node_id": "672182c9-c951-4f6f-b298-6e6d56b332c5", "node_type": null, "metadata": {"page_label": "1", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "d0b2337ea0175ce52e906107a95d436d9ae92156a04aa571338be90a45610d2a"}}, "hash": "f2043617d5c5d3315a08e1d7ee4773ce43b542c24d17d9ba2a44ea4d0c946ac5", "text": "Predict st ock prices with Long shor t-term memor y (LSTM) \ue313\nThis simple example will show y ou how LSTM models pr edict time series data. St ock mark et data is a gr eat choice for this because it' s quite\nregular and widely a vailable via the Internet.\nWe install Tensor\u0000ow 2.0 with GPU suppor t \u0000rstInstall r equir ements \ue313!pip install tensorflow-gpu== 2.0.0-alpha0\n\uedd9 \ueddaRequirement already satisfied: tensorflow-gpu==2.0.0-alpha0 in /usr/local/lib/python3.6/dist-packages (2.0.0a0)\nRequirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) (0.7.1)\nRequirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) (0.7.1)\nRequirement already satisfied: google-pasta>=0.1.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) (0.1.5)\nRequirement already satisfied: gast>=0.2.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) (0.2.2)\nRequirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) \nRequirement already satisfied: tb-nightly<1.14.0a20190302,>=1.14.0a20190301 in /usr/local/lib/python3.6/dist-packages (from tensorflow-g\nRequirement already satisfied: tf-estimator-nightly<1.14.0.dev2019030116,>=1.14.0.dev2019030115 in /usr/local/lib/python3.6/dist-package\nRequirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) (0.33.1)\nRequirement already satisfied: keras-applications>=1.0.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) (\nRequirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) (3.7.1)\nRequirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) (1.11.0)\nRequirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) (1.1.0)\nRequirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) (1.15.0)\nRequirement already satisfied: numpy<2.0,>=1.14.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu==2.0.0-alpha0) (1.16.2)\nRequirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tb-nightly<1.14.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "672182c9-c951-4f6f-b298-6e6d56b332c5": {"__data__": {"id_": "672182c9-c951-4f6f-b298-6e6d56b332c5", "embedding": null, "metadata": {"page_label": "1", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bd4d1b6e-8373-415d-a688-fe14ea4e9d9d", "node_type": null, "metadata": {"page_label": "1", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "148fef228821f4504c19dc926efebd74fe73211e61fb63b69e87d30c00e03e80"}, "2": {"node_id": "9d6d9da0-b8b0-4c0f-bdd4-5633034da6cd", "node_type": null, "metadata": {"page_label": "1", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "f2043617d5c5d3315a08e1d7ee4773ce43b542c24d17d9ba2a44ea4d0c946ac5"}, "3": {"node_id": "e4a94502-787f-450d-996f-b6359e5165a1", "node_type": null, "metadata": {"page_label": "1", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "39a9e39b661a89b422c96a23eaf8e7f11bb6d9dab190c2c7a79eeb0d09f6a004"}}, "hash": "d0b2337ea0175ce52e906107a95d436d9ae92156a04aa571338be90a45610d2a", "text": "6/dist-packages (from tb-nightly<1.14.0a20190302,>=1.14.0a20190\nRequirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tb-nightly<1.14.0a20190302,>=1.14.0a201\nRequirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications>=1.0.6->tensorflow-gpu==2.0.0-alp\nRequirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.6.1->tensorflow-gpu==2.0.0-alpha0)!pip install pandas-datareader\n\uedd9 \ueddaRequirement already satisfied: pandas-datareader in /usr/local/lib/python3.6/dist-packages (0.7.0)\nRequirement already satisfied: pandas>=0.19.2 in /usr/local/lib/python3.6/dist-packages (from pandas-datareader) (0.23.4)\nRequirement already satisfied: lxml in /usr/local/lib/python3.6/dist-packages (from pandas-datareader) (4.2.6)\nRequirement already satisfied: wrapt in /usr/local/lib/python3.6/dist-packages (from pandas-datareader) (1.10.11)\nRequirement already satisfied: requests>=2.3.0 in /usr/local/lib/python3.6/dist-packages (from pandas-datareader) (2.18.4)\nRequirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.19.2->pandas-datareader) (1.16.2)\nRequirement already satisfied: python-dateutil>=2.5.0 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.19.2->pandas-datareader)\nRequirement already satisfied: pytz>=2011k in /usr/local/lib/python3.6/dist-packages (from pandas>=0.19.2->pandas-datareader) (2018.9)\nRequirement already satisfied: urllib3<1.23,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.3.0->pandas-datareader)\nRequirement already satisfied: idna<2.7,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.3.0->pandas-datareader) (2.6)\nRequirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.3.0->pandas-datareader)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.3.0->pandas-datareader) (2\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.5.0->pandas>=0.19.2->pandas-d!apt install graphviz\nReading package lists. Done\nBuilding dependency tree       \nReading state information. Done\ngraphviz is already the newest version (2.40.1-2).\nThe following package was automatically installed and is no longer required:\n  libnvidia-common-410\nUse 'apt autoremove' to remove it.\n0 upgraded, 0 newly installed, 0 to remove and 6 not upgraded.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e4a94502-787f-450d-996f-b6359e5165a1": {"__data__": {"id_": "e4a94502-787f-450d-996f-b6359e5165a1", "embedding": null, "metadata": {"page_label": "1", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bd4d1b6e-8373-415d-a688-fe14ea4e9d9d", "node_type": null, "metadata": {"page_label": "1", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "148fef228821f4504c19dc926efebd74fe73211e61fb63b69e87d30c00e03e80"}, "2": {"node_id": "672182c9-c951-4f6f-b298-6e6d56b332c5", "node_type": null, "metadata": {"page_label": "1", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "d0b2337ea0175ce52e906107a95d436d9ae92156a04aa571338be90a45610d2a"}}, "hash": "39a9e39b661a89b422c96a23eaf8e7f11bb6d9dab190c2c7a79eeb0d09f6a004", "text": "0 upgraded, 0 newly installed, 0 to remove and 6 not upgraded.!pip install pydot pydot-ng\nRequirement already satisfied: pydot in /usr/local/lib/python3.6/dist-packages (1.3.0)\nRequirement already satisfied: pydot-ng in /usr/local/lib/python3.6/dist-packages (2.0.0)\nRequirement already satisfied: pyparsing>=2.1.4 in /usr/local/lib/python3.6/dist-packages (from pydot) (2.4.0)\nIntroduction\ue313\nLSTMs ar e very power ful in sequence pr ediction pr oblems. They can st ore past information.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aadcda65-b12e-4a39-aff1-311364c9abfa": {"__data__": {"id_": "aadcda65-b12e-4a39-aff1-311364c9abfa", "embedding": null, "metadata": {"page_label": "2", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "800d4345-1c92-496c-b571-ffdbcd9b9099", "node_type": null, "metadata": {"page_label": "2", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "5853cbb4b54a8fa6339852ad1358d58b3a656bae74fb796157dfbe67b0664474"}}, "hash": "5853cbb4b54a8fa6339852ad1358d58b3a656bae74fb796157dfbe67b0664474", "text": "I use pandas-datar eader t o get the hist orical st ock prices fr om Y ahoo! \u0000nance. F or this example, I get only the hist orical data till the end of\ntr aining_end_data .Loading the dataset\ue313import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom pandas_datareader import datatickers = 'AAPL'\nstart_date = '1980-12-01'\nend_date = '2018-12-31'\nstock_data = data.get_data_yahoo (tickers, start_date , end_date )High Low Open Close Volume Adj Close\nDate\n1980-12-12 0.515625 0.513393 0.513393 0.513393 117258400.0 0.023007\n1980-12-15 0.488839 0.486607 0.488839 0.486607 43971200.0 0.021807\n1980-12-16 0.453125 0.450893 0.453125 0.450893 26432000.0 0.020206\n1980-12-17 0.464286 0.462054 0.462054 0.462054 21610400.0 0.020706\n1980-12-18 0.477679 0.475446 0.475446 0.475446 18362400.0 0.021307\n1980-12-19 0.506696 0.504464 0.504464 0.504464 12157600.0 0.022607\n1980-12-22 0.531250 0.529018 0.529018 0.529018 9340800.0 0.023707\n1980-12-23 0.553571 0.551339 0.551339 0.551339 11737600.0 0.024708\n1980-12-24 0.582589 0.580357 0.580357 0.580357 12000800.0 0.026008\n1980-12-26 0.636161 0.633929 0.633929 0.633929 13893600.0 0.028409stock_data.head (10)\nHigh Low Open Close Volume Adj Close\ncount9594.000000 9594.000000 9594.000000 9594.000000 9.594000e+03 9594.000000\nmean 26.549240 26.026566 26.297032 26.292735 8.758682e+07 22.587725\nstd 47.280499 46.462657 46.880676 46.878276 8.676287e+07 44.664584\nmin 0.198661 0.196429 0.198661 0.196429 3.472000e+05 0.008803\n25% 1.071429 1.031295 1.049464 1.051429 3.407435e+07 0.148196\n50% 1.696429 1.633929 1.664286 1.665179 5.944890e+07 0.879176\n75% 26.317500 25.404285 25.910000 25.841429 1.091926e+08 17.231145\nmax233.470001 229.779999 230.779999 232.070007 1.855410e+09 230.275482stock_data.describe () stock_data_len = stock_data ['Close'].count()\nprint(stock_data_len )\n9594\nI'm only inter ested in close  pricesclose_prices = stock_data.iloc [:, 1:2].values\nprint(close_prices )\n[[  0.51339287]\n [  0.48660713]", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "60668204-e15b-4afa-8b90-55604a282266": {"__data__": {"id_": "60668204-e15b-4afa-8b90-55604a282266", "embedding": null, "metadata": {"page_label": "3", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7d853072-18ba-4fa2-9409-38f7bdf4c827", "node_type": null, "metadata": {"page_label": "3", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "61c35c80062de8bcbbd3592cc98f8d165795da1af0a5e8974c6928e2d569c3f7"}}, "hash": "0f3ad1442218ea26fa7a6c8b198df75eb681d1b91f3e5d0b2f9ff24b0873fe46", "text": "[  0.45089287]\n ...\n [150.07000732]\n [154.55000305]\n [156.47999573]]\nOf course, some of the week days might be public holida ys in which case no price will be a vailable. F or this r eason, we will \u0000ll the missing prices\nwith the latest a vailable pricesall_bussinessdays = pd.date_range (start=start_date , end=end_date , freq='B')\nprint(all_bussinessdays )\nDatetimeIndex(['1980-12-01', '1980-12-02', '1980-12-03', '1980-12-04',\n               '1980-12-05', '1980-12-08', '1980-12-09', '1980-12-10',\n               '1980-12-11', '1980-12-12',\n               ...\n               '2018-12-18', '2018-12-19', '2018-12-20', '2018-12-21',\n               '2018-12-24', '2018-12-25', '2018-12-26', '2018-12-27',\n               '2018-12-28', '2018-12-31'],\n              dtype='datetime64[ns]', length=9936, freq='B')close_prices = stock_data.reindex (all_bussinessdays )\nclose_prices = stock_data.fillna (method='ffill')High Low Open Close Volume Adj Close\nDate\n1980-12-12 0.515625 0.513393 0.513393 0.513393 117258400.0 0.023007\n1980-12-15 0.488839 0.486607 0.488839 0.486607 43971200.0 0.021807\n1980-12-16 0.453125 0.450893 0.453125 0.450893 26432000.0 0.020206\n1980-12-17 0.464286 0.462054 0.462054 0.462054 21610400.0 0.020706\n1980-12-18 0.477679 0.475446 0.475446 0.475446 18362400.0 0.021307\n1980-12-19 0.506696 0.504464 0.504464 0.504464 12157600.0 0.022607\n1980-12-22 0.531250 0.529018 0.529018 0.529018 9340800.0 0.023707\n1980-12-23 0.553571 0.551339 0.551339 0.551339 11737600.0 0.024708\n1980-12-24 0.582589 0.580357 0.580357 0.580357 12000800.0 0.026008\n1980-12-26 0.636161 0.633929 0.633929 0.633929 13893600.0 0.028409close_prices.head (10)\nThe dataset is now complete and fr ee of missing v alues. Let' s have a look t o the data fr ame summar y:\nFeatur e scaling \ue313training_set = close_prices.iloc [:, 1:2].values print(training_set )\n[[  0.51339287]\n [  0.48660713]\n [  0.45089287]\n ...\n [150.07000732]\n [154.55000305]\n [156.47999573]]from sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler (feature_range = (0, 1))\ntraining_set_scaled = sc.fit_transform (training_set )\nprint(training_set_scaled.shape )\n(9594, 1)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "99ed77a3-5272-42e2-b5db-e626e9735fc8": {"__data__": {"id_": "99ed77a3-5272-42e2-b5db-e626e9735fc8", "embedding": null, "metadata": {"page_label": "4", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "07de102f-391b-433d-b21f-fee6fa96cd4c", "node_type": null, "metadata": {"page_label": "4", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "418692cea440aef09ebc9df1d7a97de0595e044fa1b1c43deef291db34315bef"}}, "hash": "418692cea440aef09ebc9df1d7a97de0595e044fa1b1c43deef291db34315bef", "text": "LSTMs expect the data in a speci\u0000c format, usually a 3D tensor . I star t by creating data with 60 da ys and conv erting it int o an arr ay using\nNumP y. Next, I conv ert the data int o a 3D dimension arr ay with f eatur e_set samples, 60 da ys and one f eatur e at each step.features = []\nlabels = []\nfor i in range(60, stock_data_len ):\n    features.append (training_set_scaled [i-60:i, 0])\n    labels.append (training_set_scaled [i, 0])\nfeatures = np.array (features )\nlabels = np.array (labels)\nfeatures = np.reshape (features , (features.shape [0], features.shape [1], 1))print(labels)\n[0.00082642 0.00089448 0.00087503 ... 0.6528062  0.67231978 0.68072627]print(features )\n[[[1.38060532e-03]\n  [1.26393438e-03]\n  [1.10837330e-03]\n  ...\n  [1.13754103e-03]\n  [9.81979819e-04]\n  [8.94476613e-04]]\n [[1.26393438e-03]\n  [1.10837330e-03]\n  [1.15698610e-03]\n  ...\n  [9.81979819e-04]\n  [8.94476613e-04]\n  [8.26418607e-04]]\n [[1.10837330e-03]\n  [1.15698610e-03]\n  [1.21532157e-03]\n  ...\n  [8.94476613e-04]\n  [8.26418607e-04]\n  [8.94476613e-04]]\n ...\n [[9.85059938e-01]\n  [9.86279533e-01]\n  [1.00000000e+00]\n  ...\n  [6.50889679e-01]\n  [6.37648276e-01]\n  [6.38214540e-01]]\n [[9.86279533e-01]\n  [1.00000000e+00]\n  [9.86715064e-01]\n  ...\n  [6.37648276e-01]\n  [6.38214540e-01]\n  [6.52806203e-01]]\n [[1.00000000e+00]\n  [9.86715064e-01]\n  [9.59927459e-01]\n  ...\n  [6.38214540e-01]\n  [6.52806203e-01]\n  [6.72319776e-01]]]\nFeatur e tensor with thr ee dimension: f eatur es[0] contains the ..., f eatur es[1] contains the last 60 da ys of v alues and f eatur es [2] contains the ...print(features.shape )\n(9534, 60, 1)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "67f7cd08-531a-41f5-adc8-6facb6bc73e5": {"__data__": {"id_": "67f7cd08-531a-41f5-adc8-6facb6bc73e5", "embedding": null, "metadata": {"page_label": "5", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e86aef86-424b-45fc-b47e-597d58c91e86", "node_type": null, "metadata": {"page_label": "5", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "b7d917f2ddcecd01057f0b05728654b675e7f698853d08c7183035ddb28f7eda"}, "3": {"node_id": "c8561c4e-b10b-4090-996a-a93f95ccbd0f", "node_type": null, "metadata": {"page_label": "5", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "91b68c8b05ae62f39eaa571619f0088246bf08a01cb2a8c9493fd048d194e509"}}, "hash": "bc40990b2b0a57c7c63d2dc685999aa1bea2c1b7f2d735379a013a029c049a54", "text": "Let's create a sequenced LSTM network with 50 units. Also the net includes some dr opout la yers with 0.2 which means that 20% of the neur ons\nwill be dr opped.Create the LSTM network\ue313import tensorflow as tf model = tf.keras.models.Sequential ([\n    tf.keras.layers.LSTM (units = 50, return_sequences = True, input_shape = (features.shape [1], 1)),\n    tf.keras.layers.Dropout (0.2),\n    tf.keras.layers.LSTM (units = 50, return_sequences = True),\n    tf.keras.layers.Dropout (0.2),\n    tf.keras.layers.LSTM (units = 50, return_sequences = True),\n    tf.keras.layers.Dropout (0.2),\n    tf.keras.layers.LSTM (units = 50),\n    tf.keras.layers.Dropout (0.2),\n    tf.keras.layers.Dense (units = 1)\n])\uedd9 \ueddaWARNING: Logging before flag parsing goes to stderr.\nW0414 15:18:15.979501 139980101556096 tf_logging.py:161] <tensorflow.python.keras.layers.recurrent.UnifiedLSTM object at 0x7f4f34285860>\nW0414 15:18:16.001110 139980101556096 tf_logging.py:161] <tensorflow.python.keras.layers.recurrent.UnifiedLSTM object at 0x7f4f34285ef0>\nW0414 15:18:16.006853 139980101556096 tf_logging.py:161] <tensorflow.python.keras.layers.recurrent.UnifiedLSTM object at 0x7f4f342a6748>\nW0414 15:18:16.013553 139980101556096 tf_logging.py:161] <tensorflow.python.keras.layers.recurrent.UnifiedLSTM object at 0x7f4f342a6e48>print(model.summary ())\nModel: \"sequential\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nunified_lstm (UnifiedLSTM)   (None, 60, 50)            10400     \n_________________________________________________________________\ndropout (Dropout)            (None, 60, 50)            0         \n_________________________________________________________________\nunified_lstm_1 (UnifiedLSTM) (None, 60, 50)            20200     \n_________________________________________________________________\ndropout_1 (Dropout)          (None, 60, 50)            0         \n_________________________________________________________________\nunified_lstm_2 (UnifiedLSTM) (None, 60, 50)            20200     \n_________________________________________________________________\ndropout_2 (Dropout)          (None, 60, 50)            0         \n_________________________________________________________________\nunified_lstm_3 (UnifiedLSTM) (None, 50)                20200     \n_________________________________________________________________\ndropout_3 (Dropout)          (None,", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c8561c4e-b10b-4090-996a-a93f95ccbd0f": {"__data__": {"id_": "c8561c4e-b10b-4090-996a-a93f95ccbd0f", "embedding": null, "metadata": {"page_label": "5", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e86aef86-424b-45fc-b47e-597d58c91e86", "node_type": null, "metadata": {"page_label": "5", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "b7d917f2ddcecd01057f0b05728654b675e7f698853d08c7183035ddb28f7eda"}, "2": {"node_id": "67f7cd08-531a-41f5-adc8-6facb6bc73e5", "node_type": null, "metadata": {"page_label": "5", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "bc40990b2b0a57c7c63d2dc685999aa1bea2c1b7f2d735379a013a029c049a54"}}, "hash": "91b68c8b05ae62f39eaa571619f0088246bf08a01cb2a8c9493fd048d194e509", "text": "50)                0         \n_________________________________________________________________\ndense (Dense)                (None, 1)                 51        \n=================================================================\nTotal params: 71,051\nTrainable params: 71,051\nNon-trainable params: 0\n_________________________________________________________________\nNone\nThe model will be compiled and optimiz e by the adam optimiz er and set the loss function as mean_squarr ed_err ormodel.compile(optimizer = 'adam', loss = 'mean_squared_error' ) from time import time\nstart = time ()\nhistory = model.fit (features , labels, epochs = 20, batch_size = 32, verbose = 1)\nend = time ()\nEpoch 1/20\n9534/9534 [==============================] - 19s 2ms/sample - loss: 0.0017\nEpoch 2/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 8.3861e-04\nEpoch 3/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 8.4889e-04\nEpoch 4/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 6.7823e-04\nEpoch 5/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 6.0230e-04", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7cd67969-0c58-4917-a3fe-5ccdff9ddfe2": {"__data__": {"id_": "7cd67969-0c58-4917-a3fe-5ccdff9ddfe2", "embedding": null, "metadata": {"page_label": "6", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8a0c8f2f-35f5-41e3-95f7-539afb4886f2", "node_type": null, "metadata": {"page_label": "6", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "65a0a3c367453acfa210d8584d9cc5dc1e5a91e3ebe43e2a8598394f686e1c26"}}, "hash": "65a0a3c367453acfa210d8584d9cc5dc1e5a91e3ebe43e2a8598394f686e1c26", "text": "Epoch 6/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 5.9530e-04\nEpoch 7/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 5.6053e-04\nEpoch 8/20\n9534/9534 [==============================] - 18s 2ms/sample - loss: 5.6923e-04\nEpoch 9/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 4.9843e-04\nEpoch 10/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 5.7040e-04\nEpoch 11/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 4.5142e-04\nEpoch 12/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 5.1318e-04\nEpoch 13/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 4.6513e-04\nEpoch 14/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 4.5369e-04\nEpoch 15/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 4.3363e-04\nEpoch 16/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 4.8583e-04\nEpoch 17/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 5.3111e-04\nEpoch 18/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 4.6322e-04\nEpoch 19/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 4.5440e-04\nEpoch 20/20\n9534/9534 [==============================] - 17s 2ms/sample - loss: 4.6059e-04print('Total training time {} seconds' .format(end - start ))\nTotal training time 349.84911346435547 seconds#  [samples, days, features]\nprint(features.shape )\n(9534, 60, 1)testing_start_date = '2019-01-01'\ntesting_end_date = '2019-04-10'\ntest_stock_data = data.get_data_yahoo (tickers, testing_start_date , testing_end_date )High Low Open Close Volume Adj Close\nDate\n2019-04-04 196.369995 193.139999 194.789993 195.690002 19114300.0 195.690002\n2019-04-05 197.100006 195.929993 196.449997 197.000000 18526600.0 197.000000\n2019-04-08 200.229996 196.339996 196.419998 200.100006 25881700.0 200.100006\n2019-04-09 202.850006 199.229996 200.320007 199.500000 35768200.0 199.500000\n2019-04-10 200.740005 198.179993 198.679993 200.619995 21695300.0 200.619995test_stock_data.tail () test_stock_data_processed = test_stock_data.iloc [:, 1:2].values print(test_stock_data_processed.shape )\n(69, 1)all_stock_data = pd.concat ((stock_data ['Close'], test_stock_data ['Close']), axis = 0) inputs = all_stock_data [len(all_stock_data ) - len(test_stock_data ) - 60:].values\ninputs = inputs.reshape (-1,1)\ninputs = sc.transform (inputs)X_test = []\nforiinrange(60,129):", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e60eadbe-9861-4ba3-9d57-3139773324cd": {"__data__": {"id_": "e60eadbe-9861-4ba3-9d57-3139773324cd", "embedding": null, "metadata": {"page_label": "7", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7b059f51-cc6b-49bc-a9fb-77df7b9ade80", "node_type": null, "metadata": {"page_label": "7", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}, "hash": "a8fc818139a132bb6f9a2d204cba42e79e4287024803476bc4f20342aac70859"}}, "hash": "690665354677e611462cc641ea35a736f3634c125de0acf15099e2cdbdff5655", "text": "for i in range(60, 129):\n    X_test.append (inputs[i-60:i, 0])X_test = np.array (X_test)\nX_test = np.reshape (X_test, (X_test.shape [0], X_test.shape [1], 1))\npredicted_stock_price = model.predict (X_test)\npredicted_stock_price = sc.inverse_transform (predicted_stock_price )\nplt.figure (figsize= (10,6))  \nplt.plot (test_stock_data_processed , color='blue', label='Actual Apple Stock Price' )  \nplt.plot (predicted_stock_price , color='red', label='Predicted Apple Stock Price' )  \nplt.title ('Apple Stock Price Prediction' )  \nplt.xlabel ('Date')  \nplt.ylabel ('Apple Stock Price' )  \nplt.legend ()  \nplt.show ()  \u0000test_inputs = test_stock_data_processed.reshape (-1,1)\ntest_inputs = sc.transform (test_inputs )\nprint(test_inputs.shape )test_features = []\nfor i in range(60, 291):\n    test_features.append (test_inputs [i-60:i, 0])\n    \ntest_features = np.array (test_features )test_features = np.reshape (test_features , (test_features.shape [0], test_features.shape [1], 1))  \nprint(test_features.shape )predicted_stock_price = model.predict (test_features ) predicted_stock_price = sc.inverse_transform (predicted_stock_price )\nprint(predicted_stock_price.shape )print(test_stock_data_processed.shape ) plt.figure (figsize= (10,6))  \nplt.plot (test_stock_data_processed , color='blue', label='Actual Apple Stock Price' )  \nplt.plot (predicted_stock_price , color='red', label='Predicted Apple Stock Price' )  \nplt.title ('Apple Stock Price Prediction' )  \nplt.xlabel ('Date')  \nplt.ylabel ('Apple Stock Price' )  \nplt.legend ()  \nplt.show ()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a87722d8-8d0f-408e-bdcb-e092eb19e332": {"__data__": {"id_": "a87722d8-8d0f-408e-bdcb-e092eb19e332", "embedding": null, "metadata": {"page_label": "1", "file_name": "yfinance \u00b7 PyPI.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bdc31236-6846-4408-9a3e-68c273d7c8fd", "node_type": null, "metadata": {"page_label": "1", "file_name": "yfinance \u00b7 PyPI.pdf"}, "hash": "2fa0137b4f546095ab0c5f4aed0660f4043fefd6ae4917285fc9cc45a70bb36f"}}, "hash": "2fa0137b4f546095ab0c5f4aed0660f4043fefd6ae4917285fc9cc45a70bb36f", "text": "Navigation\n\uf036 Project description\n\uf1da Release history\n\uf019 Download files\nProject links\n\uf015HomepageProject description\nDownload market data from Yahoo! Finance's API\n*** IMPORTANT LEGAL DISCLAIMER ***\nYahoo!, Y!Finance, and Yahoo! finance are registered trademarks of Yahoo, Inc.\nyfinance is not a\u0000iliated, endorsed, or vetted by Yahoo, Inc. It's an open-source tool that uses\nYahoo's publicly available APIs, and is intended for research and educational purposes.\nYou should refer to Yahoo!'s terms of use (here, here, and here) for details on your rights to use\nthe actual data downloaded. Remember - the Yahoo! finance API is intended for personal useHelp Sponsors Log in Register\npip install yfinanceyfinance 0.2.36\n \u2713 Latest version\nReleased: Jan 21, 2024\nDownload market data from Yahoo! Finance APISearch projects \uf002\n\uf0c5", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "505eba80-8393-4eae-990c-f4deb3375a34": {"__data__": {"id_": "505eba80-8393-4eae-990c-f4deb3375a34", "embedding": null, "metadata": {"page_label": "2", "file_name": "yfinance \u00b7 PyPI.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "378ca16c-7089-41ef-8b86-7ef6e208a64d", "node_type": null, "metadata": {"page_label": "2", "file_name": "yfinance \u00b7 PyPI.pdf"}, "hash": "3b36677aa946ff6287773a363eea6967c1b4add7cd6a8b03c79fed2c744edb91"}}, "hash": "3b36677aa946ff6287773a363eea6967c1b4add7cd6a8b03c79fed2c744edb91", "text": "Statistics\nGitHub statistics:\n\u2b50 Stars:11339\n\uf126 Forks:2137\n\uf06a Open issues:164\n\ue13c Open PRs:22\nView statistics for this project\nvia Libraries.io , or by using\nour public dataset on Google\nBigQuery\nMeta\nLicense: Apache So\u0000ware\nLicense (Apache)\nAuthor:Ran Aroussi\n\uf02cpandas, yahoo finance,\npandas datareader\nMaintainers\nranaroussi\nClassifiersonly.python python2.7, 3.6+ 2.7, 3.6+ pypipypiv0.2.36 v0.2.36 statusstatusbetabeta installs installs1.5M/month 1.5M/month buildbuildno longer available no longer available\ncodefactorcodefactor AA\nStarStar11k11k FollowFollow\nyfinance o\u0000ers a threaded and Pythonic way to download market data from Yahoo!\u24c7  finance.\n\u2192 Check out this Blog post for a detailed tutorial with code examples.\nChangelog \u00bb\nInstallation\nInstall yfinance using pip:\n$ pip install yfinance --upgrade --no-cache-dir\nWith Conda.\nTo install with optional dependencies, replace optional with: nospam for caching-requests,\nrepair for price repair, or nospam,repair for both:\n$ pip install \"yfinance[optional]\"\nRequired dependencies , all dependencies.\uf35d\n\uf35d\n\u2709", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9b33f6c6-cae1-44b7-a76f-9393d11605b5": {"__data__": {"id_": "9b33f6c6-cae1-44b7-a76f-9393d11605b5", "embedding": null, "metadata": {"page_label": "3", "file_name": "yfinance \u00b7 PyPI.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c6e52e41-2f5b-43e0-ab40-d21ad03be7c3", "node_type": null, "metadata": {"page_label": "3", "file_name": "yfinance \u00b7 PyPI.pdf"}, "hash": "cd0a19c0c78b276503cd24c7fcb0794acacc92828f084212c47bf9b5123d1d57"}}, "hash": "cd0a19c0c78b276503cd24c7fcb0794acacc92828f084212c47bf9b5123d1d57", "text": "Development Status\n4 - Beta\nIntended Audience\nDevelopers\nLicense\nOSI Approved :: Apache\nSo\u0000ware License\nOperating System\nOS Independent\nProgramming Language\nPython :: 3.6\nPython :: 3.7\nPython :: 3.8\nPython :: 3.9\nPython :: 3.10\nTopic\nO\u0000ice/Business :: Financial\nO\u0000ice/Business :: Financial\n:: Investment\nScientific/Engineering ::\nInterface Engine/Protocol\nTranslator\nSo\u0000ware Development ::\nLibraries\nSo\u0000ware Development ::\nLibraries :: Python ModulesQuick Start\nThe Ticker module\nThe Ticker module, which allows you to access ticker data in a more Pythonic way:import yfinance as yf\nmsft = yf.Ticker(\"MSFT\")\n# get all stock info\nmsft.info\n# get historical market data\nhist = msft.history(period=\"1mo\")\n# show meta information about the history (requires history() to be called firs\nmsft.history_metadata\n# show actions (dividends, splits, capital gains)\nmsft.actions\nmsft.dividends\nmsft.splits\nmsft.capital_gains  # only for mutual funds & etfs\n# show share count\nmsft.get_shares_full(start=\"2022-01-01\", end=None)\n# show financials:\n# - income statement\nmsft.income_stmt\nmsft.quarterly_income_stmt\n# - balance sheet", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "27b31ac6-e968-4883-9af0-cba6dff1a0d4": {"__data__": {"id_": "27b31ac6-e968-4883-9af0-cba6dff1a0d4", "embedding": null, "metadata": {"page_label": "4", "file_name": "yfinance \u00b7 PyPI.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f3909be4-0893-4792-b760-697d2fc37e35", "node_type": null, "metadata": {"page_label": "4", "file_name": "yfinance \u00b7 PyPI.pdf"}, "hash": "03343d759431a001a704ad57b33c008e90a80e5fd1d894a36e45da8985c954e0"}}, "hash": "03343d759431a001a704ad57b33c008e90a80e5fd1d894a36e45da8985c954e0", "text": "Bloomberg is a Visionary\nsponsor of the Python\nSoftware Foundation.\nPSF Sponsor \u00b7 Served ethicallymsft.balance_sheet\nmsft.quarterly_balance_sheet\n# - cash flow statement\nmsft.cashflow\nmsft.quarterly_cashflow\n# see `Ticker.get_income_stmt()` for more options\n# show holders\nmsft.major_holders\nmsft.institutional_holders\nmsft.mutualfund_holders\nmsft.insider_transactions\nmsft.insider_purchases\nmsft.insider_roster_holders\n# show recommendations\nmsft.recommendations\nmsft.recommendations_summary\nmsft.upgrades_downgrades\n# Show future and historic earnings dates, returns at most next 4 quarters and \n# Note: If more are needed use msft.get_earnings_dates(limit=XX) with increased\nmsft.earnings_dates\n# show ISIN code - *experimental*\n# ISIN = International Securities Identification Number\nmsft.isin\n# show options expirations\nmsft.options\n# show news\nmsft.news\n# get option chain for specific expiration\n\uf35d", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d66326c6-cca4-4f2b-bb67-a6ebfd7b3200": {"__data__": {"id_": "d66326c6-cca4-4f2b-bb67-a6ebfd7b3200", "embedding": null, "metadata": {"page_label": "5", "file_name": "yfinance \u00b7 PyPI.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2e326ab7-c150-482a-9077-17114d1d8476", "node_type": null, "metadata": {"page_label": "5", "file_name": "yfinance \u00b7 PyPI.pdf"}, "hash": "ebefc9434a40083aebf89f9493e671bfb2e7a16ed97ce78199fd124291e9a735"}}, "hash": "ebefc9434a40083aebf89f9493e671bfb2e7a16ed97ce78199fd124291e9a735", "text": "opt = msft.option_chain('YYYY-MM-DD')\n# data available via: opt.calls, opt.puts\nIf you want to use a proxy server for downloading data, use:\nimport yfinance as yf\nmsft = yf.Ticker(\"MSFT\")\nmsft.history(..., proxy=\"PROXY_SERVER\")\nmsft.get_actions(proxy=\"PROXY_SERVER\")\nmsft.get_dividends(proxy=\"PROXY_SERVER\")\nmsft.get_splits(proxy=\"PROXY_SERVER\")\nmsft.get_capital_gains(proxy=\"PROXY_SERVER\")\nmsft.get_balance_sheet(proxy=\"PROXY_SERVER\")\nmsft.get_cashflow(proxy=\"PROXY_SERVER\")\nmsft.option_chain(..., proxy=\"PROXY_SERVER\")\n...\nMultiple tickers\nTo initialize multiple Ticker objects, use\nimport yfinance as yf\ntickers = yf.Tickers('msft aapl goog')\n# access each ticker using (example)\ntickers.tickers['MSFT'].info", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8c5c4f76-d05a-4a3b-ae66-fde2e8c176f9": {"__data__": {"id_": "8c5c4f76-d05a-4a3b-ae66-fde2e8c176f9", "embedding": null, "metadata": {"page_label": "6", "file_name": "yfinance \u00b7 PyPI.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "65c707fe-c603-4c62-9c5d-19a84b9d590f", "node_type": null, "metadata": {"page_label": "6", "file_name": "yfinance \u00b7 PyPI.pdf"}, "hash": "fd89f8fb98ff87d022177c777876c52bade9019cae197d37b207a2dba022a3aa"}}, "hash": "fd89f8fb98ff87d022177c777876c52bade9019cae197d37b207a2dba022a3aa", "text": "tickers.tickers['AAPL'].history(period=\"1mo\")\ntickers.tickers['GOOG'].actions\nTo download price history into one table:\nimport yfinance as yf\ndata = yf.download(\"SPY AAPL\", period=\"1mo\")\nyf.download() and Ticker.history() have many options for configuring fetching and\nprocessing. Review the Wiki for more options and detail.\nLogging\nyfinance now uses the logging module to handle messages, default behaviour is only print\nerrors. If debugging, use yf.enable_debug_mode() to switch logging to debug with custom\nformatting.\nSmarter scraping\nInstall the nospam packages for smarter scraping using pip (see Installation). These packages\nhelp cache calls such that Yahoo is not spammed with requests.\nTo use a custom requests session, pass a session= argument to the Ticker constructor. This\nallows for caching calls to the API as well as a custom way to modify requests via the User-agent\nheader.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "999e2ac7-4765-4334-96fe-eb6ccde9f25e": {"__data__": {"id_": "999e2ac7-4765-4334-96fe-eb6ccde9f25e", "embedding": null, "metadata": {"page_label": "7", "file_name": "yfinance \u00b7 PyPI.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "35718d67-39f3-4655-9880-9f225a89480f", "node_type": null, "metadata": {"page_label": "7", "file_name": "yfinance \u00b7 PyPI.pdf"}, "hash": "843616f58e2f18e1e971b00d4334e641ab6634af5e18c259d66db048a5f00ca6"}}, "hash": "843616f58e2f18e1e971b00d4334e641ab6634af5e18c259d66db048a5f00ca6", "text": "\uedd9 \uedda\nimport requests_cache\nsession = requests_cache.CachedSession('yfinance.cache')\nsession.headers['User-agent'] = 'my-program/1.0'\nticker = yf.Ticker('msft', session=session)\n# The scraped response will be stored in the cache\nticker.actions\nCombine requests_cache with rate-limiting to avoid triggering Yahoo's rate-limiter/blocker that\ncan corrupt data.from requests import Session\nfrom requests_cache import CacheMixin, SQLiteCache\nfrom requests_ratelimiter import LimiterMixin, MemoryQueueBucket\nfrom pyrate_limiter import Duration, RequestRate, Limiter\nclass CachedLimiterSession(CacheMixin, LimiterMixin, Session):\n    pass\nsession = CachedLimiterSession(\n    limiter=Limiter(RequestRate(2, Duration.SECOND*5)),  # max 2 requests per 5\n    bucket_class=MemoryQueueBucket,\n    backend=SQLiteCache(\"yfinance.cache\"),\n)\nManaging Multi-Level Columns\nThe following answer on Stack Overflow is for How to deal with multi-level column names\ndownloaded with yfinance?\nyfinance returns a pandas.DataFrame with multi-level column names, with a level for the\nticker and a level for the stock price data", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "170fdb63-5927-407c-96f5-fed8e81d2899": {"__data__": {"id_": "170fdb63-5927-407c-96f5-fed8e81d2899", "embedding": null, "metadata": {"page_label": "8", "file_name": "yfinance \u00b7 PyPI.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "82b501c6-651f-44e6-9913-f910007ba867", "node_type": null, "metadata": {"page_label": "8", "file_name": "yfinance \u00b7 PyPI.pdf"}, "hash": "3cc7f7e399c4fcecdac0f3099e8fba8d6c03bfb2efe3de6f6e093f7bad393cdb"}}, "hash": "3cc7f7e399c4fcecdac0f3099e8fba8d6c03bfb2efe3de6f6e093f7bad393cdb", "text": "The answer discusses:\nHow to correctly read the the multi-level columns a\u0000er saving the dataframe to a csv\nwith pandas.DataFrame.to_csv\nHow to download single or multiple tickers into a single dataframe with single level\ncolumn names and a ticker column\npandas_datareader override\nIf your code uses pandas_datareader and you want to download data faster, you can \"hijack\"\npandas_datareader.data.get_data_yahoo() method to use yfinance while making sure the\nreturned data is in the same format as pandas_datareader's get_data_yahoo().\nfrom pandas_datareader import data as pdr\nimport yfinance as yf\nyf.pdr_override() # <== that's all it takes :-)\n# download dataframe\ndata = pdr.get_data_yahoo(\"SPY\", start=\"2017-01-01\", end=\"2017-04-30\")\nPersistent cache store\nTo reduce Yahoo, yfinance store some data locally: timezones to localize dates, and cookie. Cache\nlocation is:\nWindows = C:/Users/<USER>/AppData/Local/py-yfinance\nLinux = /home/<USER>/.cache/py-yfinance\nMacOS = /Users/<USER>/Library/Caches/py-yfinance", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f3d640f1-9aca-48b2-904b-81ae048f6266": {"__data__": {"id_": "f3d640f1-9aca-48b2-904b-81ae048f6266", "embedding": null, "metadata": {"page_label": "9", "file_name": "yfinance \u00b7 PyPI.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5e0ebafd-1e64-41ac-b775-f15cf64dc6be", "node_type": null, "metadata": {"page_label": "9", "file_name": "yfinance \u00b7 PyPI.pdf"}, "hash": "faad4f8a4cd2b071aa7a1c4449ad6091dd79ae8b851125406fc4e749eccb9e53"}}, "hash": "faad4f8a4cd2b071aa7a1c4449ad6091dd79ae8b851125406fc4e749eccb9e53", "text": "You can direct cache to use a di\u0000erent location with set_tz_cache_location():\nimport yfinance as yf\nyf.set_tz_cache_location(\"custom/cache/location\")\n...\nDevelopers: want to contribute?\nyfinance relies on community to investigate bugs and contribute code. Developer guide:\nhttps://github.com/ranaroussi/yfinance/discussions/1084\nLegal Stu\u0000\nyfinance is distributed under the Apache So\u0000ware License. See the LICENSE.txt file in the release\nfor details.\nAGAIN - yfinance is not a\u0000iliated, endorsed, or vetted by Yahoo, Inc. It's an open-source tool that\nuses Yahoo's publicly available APIs, and is intended for research and educational purposes. You\nshould refer to Yahoo!'s terms of use (here, here, and here) for detailes on your rights to use the\nactual data downloaded.\nP.S.\nPlease drop me an note with any feedback you have.\nRan Aroussi", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "64254380-9a67-4f6d-b9bf-a651aef1e7eb": {"__data__": {"id_": "64254380-9a67-4f6d-b9bf-a651aef1e7eb", "embedding": null, "metadata": {"page_label": "10", "file_name": "yfinance \u00b7 PyPI.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "83ba0fe9-eae1-42b6-bb11-4830afc86656", "node_type": null, "metadata": {"page_label": "10", "file_name": "yfinance \u00b7 PyPI.pdf"}, "hash": "e680d980392f26fd75276a7d466b8a6a40113ba20f8685b4ad39617c02af83f6"}}, "hash": "e680d980392f26fd75276a7d466b8a6a40113ba20f8685b4ad39617c02af83f6", "text": "Help\nInstalling packages\nUploading packages\nUser guide\nProject name retention\nFAQsAbout PyPI\nPyPI on Twitter\nInfrastructure dashboard\nStatistics\nLogos & trademarks\nOur sponsorsContributing to PyPI\nBugs and feedback\nContribute on GitHub\nTranslate PyPI\nSponsor PyPI\nDevelopment credits\nUsing PyPI\nCode of conduct\nReport security issue\nPrivacy policy\nTerms of use\nAcceptable Use Policy\nStatus:Service Under Maintenance\nDeveloped and maintained by the Python community, for the Python community.\nDonate today!\uf35d\n\uf35d\n\uf35d\n\uf35d\uf35d\n\uf35d \uf35d\n\uf35d\n\uf35d\n\uf35d\n\uf35d\n\uf35d", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e7e878ca-5fa0-43c8-9cb5-6569e4ea6dcc": {"__data__": {"id_": "e7e878ca-5fa0-43c8-9cb5-6569e4ea6dcc", "embedding": null, "metadata": {"page_label": "11", "file_name": "yfinance \u00b7 PyPI.pdf"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5ecc2701-727a-4548-aa80-2d32dab0fa53", "node_type": null, "metadata": {"page_label": "11", "file_name": "yfinance \u00b7 PyPI.pdf"}, "hash": "153afaa5e2223f9e63b1f639555231e8797d2437e300b0cb8ad00491606570b5"}}, "hash": "3ee20b31048db7536c837727e6a381a80e06a24d0740886c8cdfd470237ad9d9", "text": "\"PyPI\", \"Python Package Index\", and the blocks logos are registered trademarks of the Python\nSo\u0000ware Foundation .\n\u00a9 2024 Python So\u0000ware Foundation\nSite map\n English espa\u00f1ol fran\u00e7ais\u65e5\u672c\u8a9e portugu\u00eas (Brasil)\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Deutsch\u4e2d\u6587  (\u7b80\u4f53 )\u4e2d\u6587  (\u7e41\u9ad4 )\u0440\u0443\u0441\u0441\u043a\u0438\u0439\u05e2\u05d1\u05e8\u05d9\u05eaesperanto\uf35d\n\uf35d\nSwitch to desktop version\n\u203a\nAWS\nCloud computing\nand Security\nSponsor\nDatadog\nMonitoring\nFastly\nCDN\nGoogle\nDownload Analytics\nMicroso\u0000\nPSF Sponsor\nPingdom\nMonitoring\nSentry\nError logging\nStatusPage\nStatus page", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"bd4d1b6e-8373-415d-a688-fe14ea4e9d9d": {"node_ids": ["9d6d9da0-b8b0-4c0f-bdd4-5633034da6cd", "672182c9-c951-4f6f-b298-6e6d56b332c5", "e4a94502-787f-450d-996f-b6359e5165a1"], "metadata": {"page_label": "1", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}}, "800d4345-1c92-496c-b571-ffdbcd9b9099": {"node_ids": ["aadcda65-b12e-4a39-aff1-311364c9abfa"], "metadata": {"page_label": "2", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}}, "7d853072-18ba-4fa2-9409-38f7bdf4c827": {"node_ids": ["60668204-e15b-4afa-8b90-55604a282266"], "metadata": {"page_label": "3", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}}, "07de102f-391b-433d-b21f-fee6fa96cd4c": {"node_ids": ["99ed77a3-5272-42e2-b5db-e626e9735fc8"], "metadata": {"page_label": "4", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}}, "e86aef86-424b-45fc-b47e-597d58c91e86": {"node_ids": ["67f7cd08-531a-41f5-adc8-6facb6bc73e5", "c8561c4e-b10b-4090-996a-a93f95ccbd0f"], "metadata": {"page_label": "5", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}}, "8a0c8f2f-35f5-41e3-95f7-539afb4886f2": {"node_ids": ["7cd67969-0c58-4917-a3fe-5ccdff9ddfe2"], "metadata": {"page_label": "6", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}}, "7b059f51-cc6b-49bc-a9fb-77df7b9ade80": {"node_ids": ["e60eadbe-9861-4ba3-9d57-3139773324cd"], "metadata": {"page_label": "7", "file_name": "stock-price-prediction-keras.ipynb - Colaboratory.pdf"}}, "bdc31236-6846-4408-9a3e-68c273d7c8fd": {"node_ids": ["a87722d8-8d0f-408e-bdcb-e092eb19e332"], "metadata": {"page_label": "1", "file_name": "yfinance \u00b7 PyPI.pdf"}}, "378ca16c-7089-41ef-8b86-7ef6e208a64d": {"node_ids": ["505eba80-8393-4eae-990c-f4deb3375a34"], "metadata": {"page_label": "2", "file_name": "yfinance \u00b7 PyPI.pdf"}}, "c6e52e41-2f5b-43e0-ab40-d21ad03be7c3": {"node_ids": ["9b33f6c6-cae1-44b7-a76f-9393d11605b5"], "metadata": {"page_label": "3", "file_name": "yfinance \u00b7 PyPI.pdf"}}, "f3909be4-0893-4792-b760-697d2fc37e35": {"node_ids": ["27b31ac6-e968-4883-9af0-cba6dff1a0d4"], "metadata": {"page_label": "4", "file_name": "yfinance \u00b7 PyPI.pdf"}}, "2e326ab7-c150-482a-9077-17114d1d8476": {"node_ids": ["d66326c6-cca4-4f2b-bb67-a6ebfd7b3200"], "metadata": {"page_label": "5", "file_name": "yfinance \u00b7 PyPI.pdf"}}, "65c707fe-c603-4c62-9c5d-19a84b9d590f": {"node_ids": ["8c5c4f76-d05a-4a3b-ae66-fde2e8c176f9"], "metadata": {"page_label": "6", "file_name": "yfinance \u00b7 PyPI.pdf"}}, "35718d67-39f3-4655-9880-9f225a89480f": {"node_ids": ["999e2ac7-4765-4334-96fe-eb6ccde9f25e"], "metadata": {"page_label": "7", "file_name": "yfinance \u00b7 PyPI.pdf"}}, "82b501c6-651f-44e6-9913-f910007ba867": {"node_ids": ["170fdb63-5927-407c-96f5-fed8e81d2899"], "metadata": {"page_label": "8", "file_name": "yfinance \u00b7 PyPI.pdf"}}, "5e0ebafd-1e64-41ac-b775-f15cf64dc6be": {"node_ids": ["f3d640f1-9aca-48b2-904b-81ae048f6266"], "metadata": {"page_label": "9", "file_name": "yfinance \u00b7 PyPI.pdf"}}, "83ba0fe9-eae1-42b6-bb11-4830afc86656": {"node_ids": ["64254380-9a67-4f6d-b9bf-a651aef1e7eb"], "metadata": {"page_label": "10", "file_name": "yfinance \u00b7 PyPI.pdf"}}, "5ecc2701-727a-4548-aa80-2d32dab0fa53": {"node_ids": ["e7e878ca-5fa0-43c8-9cb5-6569e4ea6dcc"], "metadata": {"page_label": "11", "file_name": "yfinance \u00b7 PyPI.pdf"}}}}